// exercises.js
const exercises = {
  beginner: {
    javascript: {
      python: [
        { js: "arr.slice(1, 3);", py: "arr[1:3]" },
        { js: "arr.reverse();", py: "arr[::-1]" },
        { js: "str.split('').reverse().join('');", py: "str[::-1]" },
        { js: "arr.push(4);", py: "arr.append(4)" },
        { js: "arr.pop();", py: "arr.pop()" },
        { js: "arr.reduce((acc, val) => acc + val, 0);", py: "sum(arr)" },
        { js: "arr.map(x => x * 2);", py: "[x * 2 for x in arr]" },
        { js: "arr.filter(x => x % 2 === 0);", py: "[x for x in arr if x % 2 == 0]" },
        { js: "arr.sort((x, y) => x - y);", py: "arr.sort()" },
        { js: "Math.max(10, 20);", py: "max(10, 20)" },
        { js: "str1.concat(str2);", py: "str1 + str2" },
        { js: "arr.map(x => x * x);", py: "[x * x for x in arr]" },
        { js: "arr.includes(2);", py: "2 in arr" },
        { js: "arr.reduce((acc, val) => acc + val * val, 0);", py: "sum(x * x for x in arr)" },
        { js: "str1.length;", py: "len(str1)" },
        { js: "arr[0];", py: "arr[0]" },
        { js: "arr.forEach(el => console.log(el));", py: "for el in arr: print(el)" },
        { js: "arr.length - 1;", py: "len(arr) - 1" },
        { js: "arr[arr.length - 1];", py: "arr[-1]" },
        { js: "arr.slice(2, 4);", py: "arr[2:4]" },
        { js: "str.split('').reverse().join('');", py: "str[::-1]" },
        { js: "arr.indexOf(3);", py: "arr.index(3)" },
        { js: "str.toUpperCase();", py: "str.upper()" },
        { js: "str.toLowerCase();", py: "str.lower()" },
        { js: "arr.slice().sort((a, b) => a - b);", py: "sorted(arr)" },
        { js: "str.indexOf('a');", py: "str.find('a')" },
        { js: "arr.some(x => x > 0);", py: "any(x > 0 for x in arr)" },
        { js: "arr.every(x => x > 0);", py: "all(x > 0 for x in arr)" },
        { js: "arr.join(', ');", py: "', '.join(map(str, arr))" },
        { js: "str.substring(1, 4);", py: "str[1:4]" },
        { js: "arr.reduce((acc, val) => acc > val ? acc : val, arr[0]);", py: "max(arr)" },
        { js: "arr.slice(0, arr.length - 1);", py: "arr[:-1]" },
        { js: "parseInt('123', 10);", py: "int('123')" },
        { js: "arr.find(x => x > 10);", py: "next((x for x in arr if x > 10), None)" },
        { js: "str.replace('hello', 'world');", py: "str.replace('hello', 'world')" },
        { js: "Number.isInteger(num);", py: "isinstance(num, int)" },
        { js: "str.split(' ');", py: "str.split()" },
        { js: "arr.concat(otherArr);", py: "arr + other_arr" },
        { js: "'copy arr' arr.slice();", py: "arr[:]" },
        { js: "'deep copy obj' JSON.parse(JSON.stringify(obj));", py: "copy.deepcopy(obj)" },
        { js: "var nums = Array.from({ length: 5 }, (v, i) => i);", py: "nums = list(range(5))" },
        { js: "str.includes('sub');", py: "'sub' in str" },
        { js: "arr.sort((a, b) => a.prop - b.prop);", py: "arr.sort(key=lambda x: x['prop'])" },
        { js: "var twoDArr = new Array(3).fill(null).map(() => new Array(3).fill(0));", py: "two_d_arr = [[0 for _ in range(3)] for _ in range(3)]" },
        { js: "String.fromCharCode(97);", py: "chr(97)" },
        { js: "'a'.charCodeAt(0);", py: "ord('a')" },
        { js: "arr.forEach((el, idx) => console.log(idx, el));", py: "for idx, el in enumerate(arr): print(idx, el)" },
        { js: "for (let i = arr.length - 1; i >= 0; i--) { console.log(arr[i]); }", py: "for el in reversed(arr): print(el)" },
        { js: "str.startsWith('hello');", py: "str.startswith('hello')" },
        { js: "String(num);", py: "str(num)" },
        { js: "Math.round(a);", py: "round(a)" },
        { js: "Math.floor(a);", py: "math.floor(a)" },
        { js: "Math.ceil(a);", py: "math.ceil(a)" },
        { js: "mySet.add('item');", py: "my_set.add('item')" },
        { js: "mySet.delete('item');", py: "my_set.discard('item')" },
        { js: "mySet.has('item');", py: "'item' in my_set" },
        { js: "getCharCount(str)", py: "Counter(str)" },
        // ... more exercises
      ],
      java: [
        { js: "arr.slice(1, 3);", ja: "Arrays.copyOfRange(arr, 1, 3);" },
        { js: "arr.reverse();", ja: "Collections.reverse(Arrays.asList(arr));" },
        { js: "str.split('').reverse().join('');", ja: "new StringBuilder(str).reverse().toString();" },
        { js: "arr.push(4);", ja: "arr.add(4);" }, // Assuming 'arr' is a List
        { js: "arr.pop();", ja: "arr.remove(arr.size() - 1);" }, // Assuming 'arr' is a List
        { js: "arr.reduce((acc, val) => acc + val, 0);", ja: "arr.stream().reduce(0, Integer::sum);" },
        { js: "arr.map(x => x * 2);", ja: "arr.stream().map(x -> x * 2).collect(Collectors.toList());" },
        { js: "arr.filter(x => x % 2 === 0);", ja: "arr.stream().filter(x -> x % 2 == 0).collect(Collectors.toList());" },
        { js: "arr.sort((x, y) => x - y);", ja: "Arrays.sort(arr);" },
        { js: "Math.max(10, 20);", ja: "Math.max(10, 20);" },
        { js: "str1.concat(str2);", ja: "str1.concat(str2);" },
        { js: "arr.map(x => x * x);", ja: "arr.stream().map(x -> x * x).collect(Collectors.toList());" },
        { js: "arr.includes(2);", ja: "Arrays.asList(arr).contains(2);" },
        { js: "arr.reduce((acc, val) => acc + val * val, 0);", ja: "arr.stream().reduce(0, (acc, val) -> acc + val * val);" },
        { js: "str1.length;", ja: "str1.length();" },
        { js: "arr[0];", ja: "arr[0];" }, // Assuming 'arr' is an array
        { js: "arr.forEach(el => console.log(el));", ja: "for (int el : arr) { System.out.println(el); }" }, // Assuming 'arr' is an array
        { js: "arr.length - 1;", ja: "arr.length - 1;" },
        { js: "arr[arr.length - 1];", ja: "arr[arr.length - 1];" }, // Assuming 'arr' is an array
        { js: "arr.slice(2, 4);", ja: "Arrays.copyOfRange(arr, 2, 4);" },
        { js: "str.split('').reverse().join('');", ja: "new StringBuilder(str).reverse().toString();" },
        { js: "arr.indexOf(3);", ja: "Arrays.asList(arr).indexOf(3);" },
        { js: "str.toUpperCase();", ja: "str.toUpperCase();" },
        { js: "str.toLowerCase();", ja: "str.toLowerCase();" },
        { js: "arr.slice().sort((a, b) => a - b);", ja: "int[] arrCopy = arr.clone(); Arrays.sort(arrCopy); arrCopy;" },
        { js: "str.indexOf('a');", ja: "str.indexOf('a');" },
        { js: "arr.some(x => x > 0);", ja: "Arrays.stream(arr).anyMatch(x -> x > 0);" },
        { js: "arr.every(x => x > 0);", ja: "Arrays.stream(arr).allMatch(x -> x > 0);" },
        { js: "arr.join(', ');", ja: "String.join(\", \", Arrays.stream(arr).map(String::valueOf).collect(Collectors.toList()));" },
        { js: "str.substring(1, 4);", ja: "str.substring(1, 4);" },
        { js: "arr.reduce((acc, val) => acc > val ? acc : val, arr[0]);", ja: "Arrays.stream(arr).max().getAsInt();" }, // Assuming 'arr' is an array of integers
        { js: "arr.slice(0, arr.length - 1);", ja: "Arrays.copyOfRange(arr, 0, arr.length - 1);" },
        { js: "parseInt('123', 10);", ja: "Integer.parseInt('123');" },
        { js: "arr.find(x => x > 10);", ja: "Arrays.stream(arr).filter(x -> x > 10).findFirst().orElse(-1);" }, // Assuming default value -1
        { js: "str.replace('hello', 'world');", ja: "str.replace('hello', 'world');" },
        { js: "Number.isInteger(num);", ja: "num instanceof Integer;" },
        { js: "str.split(' ');", ja: "str.split(\" \");" },
        { js: "arr.concat(otherArr);", ja: "Stream.concat(Arrays.stream(arr), Arrays.stream(otherArr)).toArray();" }, // Assuming 'arr' and 'otherArr' are arrays
        { js: "var arrCopy = arr.slice();", ja: "int[] arrCopy = Arrays.copyOf(arr, arr.length);" }, // Assuming 'arr' is an array of integers
        { js: "'deep copy obj' JSON.parse(JSON.stringify(obj));", ja: "deepCopy(obj);" }, // Assuming a deepCopy method is implemented
        { js: "var nums = Array.from({ length: 5 }, (v, i) => i);", ja: "IntStream.range(0, 5).toArray();" },
        { js: "str.includes('sub');", ja: "str.contains('sub');" },
        { js: "arr.sort((a, b) => a.prop - b.prop);", ja: "Arrays.sort(arr, Comparator.comparingInt(a -> a.prop));" }, // Assuming 'arr' is an array of objects with a 'prop' property
        { js: "var twoDArr = new Array(3).fill(null).map(() => new Array(3).fill(0));", ja: "int[][] twoDArr = new int[3][3];" },
        { js: "String.fromCharCode(97);", ja: "Character.toString((char) 97);" },
        { js: "'a'.charCodeAt(0);", ja: "(int) 'a';" },
        { js: "arr.forEach((el, idx) => console.log(idx, el));", ja: "IntStream.range(0, arr.length).forEach(idx -> System.out.println(idx + \" \" + arr[idx]));" },
        { js: "for (let i = arr.length - 1; i >= 0; i--) { console.log(arr[i]); }", ja: "for (int i = arr.length - 1; i >= 0; i--) { System.out.println(arr[i]); }" },
        { js: "str.startsWith('hello');", ja: "str.startsWith('hello');" },
        { js: "String(num);", ja: "String.valueOf(num);" },
        { js: "Math.round(a);", ja: "Math.round(a);" },
        { js: "Math.floor(a);", ja: "Math.floor(a);" },
        { js: "Math.ceil(a);", ja: "Math.ceil(a);" },
        { js: "mySet.add('item');", ja: "mySet.add('item');" },
        { js: "mySet.delete('item');", ja: "mySet.remove('item');" },
        { js: "mySet.has('item');", ja: "mySet.contains('item');" },
        // ... more exercises
      ],
      php: [
        { js: "arr.slice(1, 3);", ph: "array_slice(arr, 1, 2);" },
        { js: "arr.reverse();", ph: "array_reverse(arr);" },
        { js: "str.split('').reverse().join('');", ph: "strrev(str);" },
        { js: "arr.push(4);", ph: "array_push(arr, 4);" },
        { js: "arr.pop();", ph: "array_pop(arr);" },
        { js: "arr.reduce((acc, val) => acc + val, 0);", ph: "array_sum(arr);" },
        { js: "arr.map(x => x * 2);", ph: "array_map(function($x) { return $x * 2; }, arr);" },
        { js: "arr.filter(x => x % 2 === 0);", ph: "array_filter(arr, function($x) { return $x % 2 === 0; });" },
        { js: "arr.sort((x, y) => x - y);", ph: "sort(arr);" },
        { js: "Math.max(10, 20);", ph: "max(10, 20);" },
        { js: "str1.concat(str2);", ph: "str1 . str2;" },
        { js: "arr.map(x => x * x);", ph: "array_map(function($x) { return $x * $x; }, arr);" },
        { js: "arr.includes(2);", ph: "in_array(2, arr);" },
        { js: "arr.reduce((acc, val) => acc + val * val, 0);", ph: "array_sum(array_map(function($x) { return $x * $x; }, arr));" },
        { js: "str1.length;", ph: "strlen(str1);" },
        { js: "arr[0];", ph: "arr[0];" },
        { js: "arr.forEach(el => console.log(el));", ph: "foreach (arr as $el) { echo $el; }" },
        { js: "arr.length - 1;", ph: "count(arr) - 1;" },
        { js: "arr[arr.length - 1];", ph: "end(arr);" },
        { js: "arr.slice(2, 4);", ph: "array_slice(arr, 2, 2);" },
        { js: "str.split('').reverse().join('');", ph: "strrev(str);" },
        { js: "arr.indexOf(3);", ph: "array_search(3, arr);" },
        { js: "str.toUpperCase();", ph: "strtoupper(str);" },
        { js: "str.toLowerCase();", ph: "strtolower(str);" },
        { js: "arr.slice().sort((a, b) => a - b);", ph: "$arrCopy = arr; sort($arrCopy); $arrCopy;" },
        { js: "str.indexOf('a');", ph: "strpos(str, 'a');" },
        { js: "arr.some(x => x > 0);", ph: "array_filter(arr, function($x) { return $x > 0; }) ? true : false;" },
        { js: "arr.every(x => x > 0);", ph: "count(array_filter(arr, function($x) { return $x > 0; })) === count(arr);" },
        { js: "arr.join(', ');", ph: "implode(', ', arr);" },
        { js: "str.substring(1, 4);", ph: "substr(str, 1, 3);" },
        { js: "arr.reduce((acc, val) => acc > val ? acc : val, arr[0]);", ph: "max(arr);" },
        { js: "arr.slice(0, arr.length - 1);", ph: "array_slice(arr, 0, count(arr) - 1);" },
        { js: "parseInt('123', 10);", ph: "(int) '123';" },
        { js: "arr.find(x => x > 10);", ph: "current(array_filter(arr, function($x) { return $x > 10; }));" },
        { js: "str.replace('hello', 'world');", ph: "str_replace('hello', 'world', str);" },
        { js: "Number.isInteger(num);", ph: "is_int(num);" },
        { js: "str.split(' ');", ph: "explode(' ', str);" },
        { js: "arr.concat(otherArr);", ph: "array_merge(arr, otherArr);" },
        { js: "var arrCopy = arr.slice();", ph: "$arrCopy = arr;" },
        { js: "'deep copy obj' JSON.parse(JSON.stringify(obj));", ph: "unserialize(serialize(obj));" },
        { js: "var nums = Array.from({ length: 5 }, (v, i) => i);", ph: "$nums = range(0, 4);" },
        { js: "str.includes('sub');", ph: "strpos(str, 'sub') !== false;" },
        { js: "arr.sort((a, b) => a.prop - b.prop);", ph: "usort(arr, function($a, $b) { return $a['prop'] <=> $b['prop']; });" },
        { js: "var twoDArr = new Array(3).fill(null).map(() => new Array(3).fill(0));", ph: "$twoDArr = array_fill(0, 3, array_fill(0, 3, 0));" },
        { js: "String.fromCharCode(97);", ph: "chr(97);" },
        { js: "'a'.charCodeAt(0);", ph: "ord('a');" },
        { js: "arr.forEach((el, idx) => console.log(idx, el));", ph: "foreach (arr as $idx => $el) { echo $idx . ' ' . $el; }" },
        { js: "for (let i = arr.length - 1; i >= 0; i--) { console.log(arr[i]); }", ph: "for ($i = count(arr) - 1; $i >= 0; $i--) { echo arr[$i]; }" },
        { js: "str.startsWith('hello');", ph: "strpos(str, 'hello') === 0;" },
        { js: "String(num);", ph: "(string) num;" },
        { js: "Math.round(a);", ph: "round(a);" },
        { js: "Math.floor(a);", ph: "floor(a);" },
        { js: "Math.ceil(a);", ph: "ceil(a);" },
        { js: "mySet.add('item');", ph: "$mySet = array('item' => true);" },
        { js: "mySet.delete('item');", ph: "unset($mySet['item']);" },
        { js: "mySet.has('item');", ph: "isset($mySet['item']);" },
        { js: "getCharCount(str)", ph: "count_chars(str, 1);" },
        // ... more exercises
      ]
      // ... potentially more target languages
    },
    // ... similar structure for python, java, php as source languages
  },
  // ... other levels ...
};

const languageKeys = {
  java: "ja",
  javascript: "js",
  php: "ph",
  python: "py"
};

export { exercises, languageKeys };